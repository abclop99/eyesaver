#!/usr/bin/env bash
#
# Set monitor brightness and colour temp according to sunrise and sunset.
#
# --- Dependencies ---
# sunwait, perl, ddcutil, grep and sed.
# Also you need to have the permissions of /dev/i2c-x devices set to rw as
# per ddcutil documentation.
#
# RGB values are calculated according to something like
# https://www.tannerhelland.com/4435/convert-temperature-rgb-algorithm-code/
# Call from cron every twenty minutes or so for a smooth transition.
# Monitors are automatically detected.
#
# eyesaver (C) 2019 A S Sharma
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.

#### USER-SET VARIABLES ####

# your location
LAT=33.0
LONG=-117.1

# slope of the sigmoid function;
# higher values means smoother transition between day and night values
SMOOTHNESS=80

# brightness floor and ceiling
FLOOR=30
CEIL=100

# colour temperatures in K
TEMP_FLOOR=2700
TEMP_CEIL=6600

# fraction of RGB value to be considered normally full
RGB_SCALING=0.9

CONTRAST=50

DEBUG=true

#### END USER-SET VARIABLES ####

# test for dependencies
test -z $(which ddcutil) && echo "ddcutil needs to be installed"
test -z $(which jq) && echo "jq needs to be installed"
test -z $(which sunwait) && echo "sunwait needs to be installed"
test -z $(which perl) && echo "perl needs to be installed"


# get sunrise and sunset into bash string array
times=($(sunwait report ${LAT}N ${LONG}E | grep 'Civil twilight' | sed 's/://g' | grep -o -E '[0-9]+'))

# remove leading zeros so number not interpreted as octal
# and convert minutes into decimal
now=$((10#$(date +%H) * 100 + 10#$(date +%M) * 100 / 60))
sunrise=$((10#${times[0]}))
sunset=$((10#${times[1]}))

# brightness sigmoid function, then scale
brightness=$(perl -E "use Math::Trig; say (int((tanh(($now-$sunrise)/$SMOOTHNESS) - tanh(($now-$sunset)/$SMOOTHNESS)) / 2 * ($CEIL - $FLOOR) + $FLOOR))")

# similarly, color temperature
temp=$(perl -E "use Math::Trig; say (int((tanh(($now-$sunrise)/$SMOOTHNESS) - tanh(($now-$sunset)/$SMOOTHNESS)) / 2 * ($TEMP_CEIL - $TEMP_FLOOR) + $TEMP_FLOOR))")

# RGB values in [0, 255]
red=$(perl -E "use List::Util qw[min max]; say max(0, min(255, int($RGB_SCALING * (329.6987 * ($temp/100 - 60) ** -0.1332047592))))")
green=$(perl -E "use List::Util qw[min max]; say max(0, min(255, int($RGB_SCALING * (99.4708 * log($temp/100) - 161.119581))))")
blue=$(perl -E "use List::Util qw[min max]; say max(0, min(255, int($RGB_SCALING * (138.51773 * log($temp/100 - 10) - 305.0447927))))")

echo "Time is $(date +%H%M), sunrise is ${times[0]} and sunset is ${times[1]}."
echo "Setting brightness to $brightness."
echo "Setting colour temperature to $temp (RGB $red $green $blue)."

# detect monitors and get I2C bus number
for monitor in $(sudo ddcutil detect --terse | grep I2C | sed -e 's/.*-//'); do

    echo "Using i2c bus ${monitor}."

    sudo ddcutil -b ${monitor} setvcp 12 $CONTRAST
    sudo ddcutil -b ${monitor} setvcp 10 $brightness

    # unfortunately some take 0-100 and some 0-255 for RGB
    # so we must scale to monitor's native scale
    max=$(sudo ddcutil -b ${monitor} -t getvcp 16 | cut -d ' ' -f 5)

    # apply colour temperature
    sudo ddcutil --async -b ${monitor} setvcp 16 $(($red * $max / 255))
    sudo ddcutil --async -b ${monitor} setvcp 18 $(($green * $max / 255))
    sudo ddcutil --async -b ${monitor} setvcp 1a $(($blue * $max / 255))

    if [ "$DEBUG" = true ] ; then
	    # debugging / validation
	    echo "Printing debug info"
	    sudo ddcutil --async -b ${monitor} getvcp 10
	    sudo ddcutil --async -b ${monitor} getvcp 12
	    sudo ddcutil --async -b ${monitor} getvcp 16
	    sudo ddcutil --async -b ${monitor} getvcp 18
	    sudo ddcutil --async -b ${monitor} getvcp 1a
    fi

done
